package aras;


import static aras.GestionarAlumnos.user_update;
import java.sql.*;
import clases.Conexion;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.*;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WriteException;


/**
 *
 * @author mjgod
 */
public class ListarAlumnos extends javax.swing.JFrame {

    public static String user_update = "";
    public static int name;
    DefaultTableModel model = new DefaultTableModel();
    
    public ListarAlumnos() {
        initComponents();
        // metodos para poder modificar la interfaz visual por codigo

        setResizable(false);
        setTitle("Sistema de Registro");
        setLocationRelativeTo(null);
        setSize(700,500);
        //cuando se cierra la ventana, termina de ejecutarse el programa
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        
        //establece la imagen como fondo de la aplicacion
        ImageIcon wallpaper = new ImageIcon("src/images/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(jLabel_Wallpaper.getWidth(),
                jLabel_Wallpaper.getHeight(), Image.SCALE_DEFAULT));
        
        jLabel_Wallpaper.setIcon(icono);
        this.repaint();
        
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "select nombre, apellido, dni, nombre_escuela, grado from alumnos order by apellido");
            //selecciona esos valores de la tabla
            
            ResultSet rs = pst.executeQuery(); //ejecuto lo anterior
            jTable_gestionarAlumnos = new JTable(model); //declaramos la tabla y ponemos el model
            jScrollPane1.setViewportView(jTable_gestionarAlumnos); //la tabla esta contenida dentro de un jscrollpane

            //agrego los titulos de las columnas
            model.addColumn("Nombre");
            model.addColumn("Apellido");
            model.addColumn("DNI");
            model.addColumn("Escuela");
            model.addColumn("Curso");

            while (rs.next()) { //para ver si encontro resultados o coincidencias
                Object[] fila = new Object[5]; //son 5 columnas

                for (int i = 0; i < 5; i++) { //voy ingresando lo que vaya encontrando en la bd
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila); //añado al modelo toda la fila
            }
            cn.close(); //cierra la conexion

        } catch (SQLException e) {
            System.err.println("Error al llenar tabla. " + e);
            JOptionPane.showMessageDialog(null, "Error al mostrar informacion, ¡Contacte al administrador!");
        }

        ObtenerDatosTabla();
        
        jTable_gestionarAlumnos.addMouseListener(new MouseAdapter() {
            @Override // para sobreescribir metodos
            public void mouseClicked(MouseEvent e){
               //le indicamos la fila que selecciono el usuario
               int fila_point = jTable_gestionarAlumnos.rowAtPoint(e.getPoint());
               //seleccionamos por defecto la columna 1 (nombre)
               int columna_point = 1;
               
               
               if(fila_point > -1){
                   name = (int) model.getValueAt(fila_point, 2); //nos devuelve el nombre
                   user_update = (String) model.getValueAt(fila_point, 1);
                   System.out.println(name);
               }
               
            }
        });
    }
    
    //Reemplazar el icono de java por default
    @Override
    public Image getIconImage(){
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/cuatroVientos.jpg"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Mostrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmb_filtro = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_gestionarAlumnos = new javax.swing.JTable();
        Imprimir = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton_eliminar1 = new javax.swing.JButton();
        jLabel_Wallpaper = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Mostrar.setBackground(new java.awt.Color(153, 153, 255));
        Mostrar.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        Mostrar.setForeground(new java.awt.Color(255, 255, 255));
        Mostrar.setText("Actualizar Tabla");
        Mostrar.setBorder(null);
        Mostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarActionPerformed(evt);
            }
        });
        getContentPane().add(Mostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 390, 210, 35));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Listar Alumnos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 20, -1, -1));

        cmb_filtro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "1º grado", "2º grado", "3º grado", "4º grado", "5º grado", "6º grado", "7º grado", "1º año", "2º año", "3º año", "4º año", "5º año" }));
        getContentPane().add(cmb_filtro, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 40, -1, -1));

        jTable_gestionarAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_gestionarAlumnos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 700, 290));

        Imprimir.setBackground(new java.awt.Color(153, 153, 255));
        Imprimir.setFont(new java.awt.Font("Arial Narrow", 0, 18)); // NOI18N
        Imprimir.setForeground(new java.awt.Color(255, 255, 255));
        Imprimir.setText("Imprimir");
        Imprimir.setBorder(null);
        Imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImprimirActionPerformed(evt);
            }
        });
        getContentPane().add(Imprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 390, 210, 35));

        jButton_eliminar.setBackground(new java.awt.Color(153, 153, 255));
        jButton_eliminar.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N
        jButton_eliminar.setForeground(new java.awt.Color(255, 255, 255));
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 430, 120, 30));

        jButton2.setBackground(new java.awt.Color(153, 153, 255));
        jButton2.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Guardar Excel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 430, 120, 30));

        jButton_eliminar1.setBackground(new java.awt.Color(153, 153, 255));
        jButton_eliminar1.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N
        jButton_eliminar1.setForeground(new java.awt.Color(255, 255, 255));
        jButton_eliminar1.setText("Estadísticas");
        jButton_eliminar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminar1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_eliminar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 430, 120, 30));
        getContentPane().add(jLabel_Wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 500));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarActionPerformed

        String seleccion = cmb_filtro.getSelectedItem().toString();
        String query = "";

        model.setRowCount(0);
        model.setColumnCount(0);

        try {
            Connection cn = Conexion.conectar();

            if (seleccion.equals("Todos")) {
                query = "select nombre, apellido, dni, nombre_escuela, grado from alumnos order by apellido";
            } else {
                query = "select nombre, apellido, dni, nombre_escuela, grado from alumnos where grado = '" + seleccion + "' order by apellido";
            }

            PreparedStatement pst = cn.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            jTable_gestionarAlumnos = new JTable(model);
            jScrollPane1.setViewportView(jTable_gestionarAlumnos);

            model.addColumn("Nombre");
            model.addColumn("Apellido");
            model.addColumn("DNI");
            model.addColumn("Escuela");
            model.addColumn("Curso");

            while(rs.next()){
                Object [] fila = new Object[5];
                for (int i = 0; i < 5; i++) {
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);
            }
            cn.close();

        } catch (SQLException e) {
            System.err.println("Error al recuperar los registros de alumnos. " + e);
        }
ObtenerDatosTabla();
    }//GEN-LAST:event_MostrarActionPerformed

    private void ImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImprimirActionPerformed
        
        String seleccion = cmb_filtro.getSelectedItem().toString();
        String query = "";
        
        Document documento = new Document(); //creo objeto de la clase document
        try {
            String ruta = System.getProperty("user.home"); //ruta donde se guarda el archivo
            PdfWriter.getInstance(documento, new FileOutputStream(ruta + "/Desktop/ListadoAsistencia.pdf")); //complementamos la ruta
            
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("src/images/BannerPDF.jpg"); //agrego el header
            header.scaleToFit(300, 900); //tamaño del header
            header.setAlignment(Chunk.ALIGN_CENTER); //posicion centrada del header
            
            Paragraph parrafo = new Paragraph(); //creo el parrafo del pdf
            parrafo.setAlignment(Paragraph.ALIGN_CENTER);
            parrafo.add("Listado de asistencia\n\n");
            parrafo.setFont(FontFactory.getFont("Tahoma", 18, Font.BOLD, BaseColor.DARK_GRAY)); //le doy la fuente
            
            documento.open();
            documento.add(header); //le agrego los elementos al documento
            documento.add(parrafo);
            
            PdfPTable tabla = new PdfPTable(26); //agrego las columnas
            
            // Set Table Total Width
            //tabla.setTotalWidth(50);
            
            // CREO UN ARREGLO QUE CONTIENE LAS MEDIDAS DE CADA UNA DE LAS COLUMNAS
// EN MI CASO SON 4, (TB PUEDES PASAR EL ARREGLO DIRECTAMENTE)
            float var = 0.15f;
            float[] medidaCeldas = {1.0f, 1.0f, var, var, var, var, var, var, var, var, var, var,
                var, var, var, var, var, var, var, var, var, var, var, var, var, var};
            /*
            medidaCeldas[0] = 1.0f;
            for (int i=1; i < 25; i++){
                medidaCeldas[i] = var;      
            }*/

// ASIGNAS LAS MEDIDAS A LA TABLA (ANCHO)
            tabla.setWidths(medidaCeldas);
            
            tabla.addCell("Apellido");
            tabla.addCell("Nombre");
            
            
            for(int i = 0; i < 24; i++){
                tabla.addCell("");
            }
            
            if (seleccion.equals("Todos")) {
                    query = "select apellido, nombre from alumnos order by apellido";
            } else {
                query = "select apellido, nombre from alumnos where grado = '" + seleccion + "' order by apellido";
            }
            
            try {
                Connection cn = Conexion.conectar();
                PreparedStatement pst = cn.prepareStatement(query);

                ResultSet rs = pst.executeQuery();
                
                if (rs.next()) {
                    do {                        
                        
                        tabla.addCell(rs.getString(1));
                        tabla.addCell(rs.getString(2));
                        
                        for(int i = 0; i < 24; i++){
                            tabla.addCell("");
                        }
                        
                    } while (rs.next());
                    documento.add(tabla);
                }
                
            } catch (SQLException e) {
                System.out.println("Error al generar lista de alumnos. " + e);
            }
            
            documento.close();
            JOptionPane.showMessageDialog(null, "Lista de alumnos creada correctamente.");
            
        } catch (Exception e) {
            System.out.println("Error al generar PDF. " + e);
        }
        
    }//GEN-LAST:event_ImprimirActionPerformed

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed
        
        int dni;
        String apellido;
        dni = name;
        apellido = user_update;
        int input = JOptionPane.showConfirmDialog(null, "¿Seguro que querés eliminar a este alumno?");
        // 0=yes, 1=no, 2=cancel
        System.out.println(input);
        
        if(input == 0) {
            try {
                Connection cn = Conexion.conectar();
                PreparedStatement pst;
                pst = cn.prepareStatement(
                        "delete from alumnos where dni = '" + dni + "' and apellido = '" + apellido + "'");
                //selecciona esos valores de la tabla
                pst.executeUpdate(); //ejecuto lo anterior
                JOptionPane.showMessageDialog(null, "Alumno eliminado correctamente.");
            } catch (SQLException ex) {
                System.err.println("Error al eliminar alumno. " + ex);
            }
            try {
                Connection cn = Conexion.conectar();
                PreparedStatement pst;
                pst = cn.prepareStatement(
                        "delete from familiares where dni_familiar = '" + dni + "' and apellido = '" + apellido + "'");
                //selecciona esos valores de la tabla
                pst.executeUpdate(); //ejecuto lo anterior
            } catch (SQLException ex) {
                System.err.println("Error al eliminar familiar. " + ex);
            }
        }
        
        
        
    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        String seleccion = cmb_filtro.getSelectedItem().toString();
        
        Connection cn = Conexion.conectar();
        String ruta = System.getProperty("user.home"); //ruta donde se guarda el archivo
        File file = new File(ruta + "/Desktop/Alumnos " + seleccion + ".xls");
        int row = 0;
        WritableSheet excelSheet = null;
        WritableWorkbook workbook = null;

        try {
            workbook = Workbook.createWorkbook(file);

            workbook.createSheet("dato", 0);

            excelSheet = workbook.getSheet(0);
            System.out.println("creando la hoja de excel...");
        } catch (IOException e){
            System.err.println(e.getMessage());
        }
        String sql = "select id,nombre,apellido,dni,nacimiento,lugar_nacimiento,"
                    + "domicilio,localidad,nombre_madre,dni_madre,nombre_padre,dni_padre,telefono,"
                    + "telefono2,numero_escuela,nombre_escuela,grado,repitio,grado_repetido,"
                    + "sangre,alergias,cobertura,condicion,retira_con,observaciones,inscripcion,cuota,fecha"
                    + " from alumnos where grado = '" + seleccion + "' order by apellido";
        String sql2 = "select id,nombre,apellido,dni,nacimiento,lugar_nacimiento,"
                    + "domicilio,localidad,nombre_madre,dni_madre,nombre_padre,dni_padre,telefono,"
                    + "telefono2,numero_escuela,nombre_escuela,grado,repitio,grado_repetido,"
                    + "sangre,alergias,cobertura,condicion,retira_con,observaciones,inscripcion,cuota,fecha"
                    + " from alumnos order by grado,apellido";

        try {
            PreparedStatement pst;
            if(seleccion.equals("Todos")){
                pst = cn.prepareStatement(sql2);
            } else {
                pst = cn.prepareStatement(sql);
            }
            

            ResultSet rs = pst.executeQuery();
            System.out.println("obteniendo registros...");
            while(rs.next()){
                Number id = new Number(0, row, rs.getLong("Id"));
                Label nombre = new Label(1, row, rs.getString("Nombre"));
                Label apellido = new Label(2, row, rs.getString("Apellido"));
                Number dni = new Number(3, row, rs.getLong("DNI"));
                Number fecha_nacimiento = new Number(4, row, rs.getLong("nacimiento"));
                Label lugar_nacimiento = new Label(5, row, rs.getString("Lugar_nacimiento"));
                Label domicilio = new Label(6, row, rs.getString("Domicilio"));
                Label localidad = new Label(7, row, rs.getString("Localidad"));
                Label nombre_madre = new Label(8, row, rs.getString("Nombre_Madre"));
                Number dni_madre = new Number(9, row, rs.getLong("DNI_Madre"));
                Label nombre_padre = new Label(10, row, rs.getString("Nombre_Padre"));
                Number dni_padre = new Number(11, row, rs.getLong("DNI_Padre"));
                Label telefono = new Label(12, row, rs.getString("Telefono"));
                Label telefono2 = new Label(13, row, rs.getString("Telefono2"));
                Number numero_escuela = new Number(14, row, rs.getLong("Numero_Escuela"));
                Label nombre_escuela = new Label(15, row, rs.getString("Nombre_Escuela"));
                Label grado = new Label(16, row, rs.getString("Grado"));
                Label repitio = new Label(17, row, rs.getString("Repitio"));
                Label grado_repetido = new Label(18, row, rs.getString("Grado_Repetido"));
                Label sangre = new Label(19, row, rs.getString("Sangre"));
                Label alergias = new Label(20, row, rs.getString("Alergias"));
                Label cobertura = new Label(21, row, rs.getString("Cobertura"));
                Label condicion = new Label(22, row, rs.getString("Condicion"));
                Label retira_con = new Label(23, row, rs.getString("retira_con"));
                Label observaciones = new Label(24, row, rs.getString("Observaciones"));
                Label inscripcion = new Label(25, row, rs.getString("Inscripcion"));
                Label cuota = new Label(26, row, rs.getString("Cuota"));
                Label fecha = new Label(27, row, rs.getString("Fecha"));
                row++;

                try {
                    excelSheet.addCell(id);
                    excelSheet.addCell(nombre);
                    excelSheet.addCell(apellido);
                    excelSheet.addCell(dni);
                    excelSheet.addCell(fecha_nacimiento);
                    excelSheet.addCell(lugar_nacimiento);
                    excelSheet.addCell(domicilio);
                    excelSheet.addCell(localidad);
                    excelSheet.addCell(nombre_madre);
                    excelSheet.addCell(dni_madre);
                    excelSheet.addCell(nombre_padre);
                    excelSheet.addCell(dni_padre);
                    excelSheet.addCell(telefono);
                    excelSheet.addCell(telefono2);
                    excelSheet.addCell(numero_escuela);
                    excelSheet.addCell(nombre_escuela);
                    excelSheet.addCell(grado);
                    excelSheet.addCell(repitio);
                    excelSheet.addCell(grado_repetido);
                    excelSheet.addCell(sangre);
                    excelSheet.addCell(alergias);
                    excelSheet.addCell(cobertura);
                    excelSheet.addCell(condicion);
                    excelSheet.addCell(retira_con);
                    excelSheet.addCell(observaciones);
                    excelSheet.addCell(inscripcion);
                    excelSheet.addCell(cuota);
                    excelSheet.addCell(fecha);
                } catch (WriteException e) {
                    System.err.println(e.getMessage());
                }



            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(ListarAlumnos.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            workbook.write();
            workbook.close();
            System.out.println("escribiendo en el disco...");
        } catch (IOException ex) {
            Logger.getLogger(ListarAlumnos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriteException ex) {
            Logger.getLogger(ListarAlumnos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        //Lo mismo pero con la lista de familiares
        //Se reutilizaran algunas de las variables usadas en el proceso anterior
        cn = Conexion.conectar();
        ruta = System.getProperty("user.home"); //ruta donde se guarda el archivo
        file = new File(ruta + "/Desktop/CuatroVientosFamiliares.xls");
        row = 0;
        excelSheet = null;
        workbook = null;

        try {
            workbook = Workbook.createWorkbook(file);

            workbook.createSheet("dato", 0);

            excelSheet = workbook.getSheet(0);
            System.out.println("creando la hoja de excel...");
        } catch (IOException e){
            System.err.println(e.getMessage());
        }
        sql = "select id,apellido,dni_familiar,nombre_familiar,parentesco,edad,ocupacion"
                    + " from familiares order by id";

        try {
            PreparedStatement pst = cn.prepareStatement(sql);

            ResultSet rs = pst.executeQuery();
            System.out.println("obteniendo registros...");
            while(rs.next()){
                Label id = new Label(0, row, rs.getString("Id"));
                Label apellido = new Label(1, row, rs.getString("apellido"));
                Number dni_familiar = new Number(2, row, rs.getLong("Dni_familiar"));
                Label nombre_familiar = new Label(3, row, rs.getString("nombre_familiar"));
                Label parentesco = new Label(4, row, rs.getString("Parentesco"));
                Number edad = new Number(5, row, rs.getLong("Edad"));
                Label ocupacion = new Label(6, row, rs.getString("Ocupacion"));
                row++;


                try {
                    excelSheet.addCell(id);   
                    excelSheet.addCell(apellido);
                    excelSheet.addCell(dni_familiar);
                    excelSheet.addCell(nombre_familiar);
                    excelSheet.addCell(parentesco);
                    excelSheet.addCell(edad);
                    excelSheet.addCell(ocupacion);

                } catch (WriteException e) {
                    System.err.println(e.getMessage());
                }    

            }
            rs.close();
            workbook.write();
            workbook.close();
            System.out.println("escribiendo en el disco...");
            JOptionPane.showMessageDialog(null, "Lista de familiares creada correctamente.");
        } catch (IOException ex) {
            Logger.getLogger(ListarAlumnos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriteException ex) {
            Logger.getLogger(ListarAlumnos.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ListarAlumnos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton_eliminar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminar1ActionPerformed
        
        new Grafica().setVisible(true);
        
    }//GEN-LAST:event_jButton_eliminar1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListarAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListarAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListarAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListarAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListarAlumnos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Imprimir;
    private javax.swing.JButton Mostrar;
    private javax.swing.JComboBox<String> cmb_filtro;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JButton jButton_eliminar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_Wallpaper;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_gestionarAlumnos;
    // End of variables declaration//GEN-END:variables


    public void ObtenerDatosTabla() {
        jTable_gestionarAlumnos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_gestionarAlumnos.rowAtPoint(e.getPoint());
                int columna_point = 0;
/*
                if (fila_point > -1) {
                    IDequipo_update = (int) model.getValueAt(fila_point, columna_point);
                    InformacionEquipoTecnico info = new InformacionEquipoTecnico();
                    info.setVisible(true);

                }*/
            }

        });
    }
}


